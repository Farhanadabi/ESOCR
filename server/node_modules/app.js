const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = 8080;
const CAPTCHA_SECRET = '6LcvP4sqAAAAACWxG_xPyoa9c747Kne_npSu0WEv'; // Your reCAPTCHA secret key
const TELEGRAM_BOT_TOKEN = '7760087813:AAHGM20mxVHCvaRMwCpaGIeB3_bMF3yKhF4'; // Your Telegram bot token
const TELEGRAM_CHAT_ID = '33180592'; // Your Telegram chat ID

// Middleware
app.use(cors());
app.use(bodyParser.json()); // For parsing application/json

// POST route to handle form submission
app.post('/submit', async (req, res) => {
    const { captchaResponse, name, discordId, esoId, serviceRequest } = req.body;

    // 1. Verify reCAPTCHA
    const captchaVerifyUrl = `https://www.google.com/recaptcha/api/siteverify`;

    try {
        const captchaResponseData = await axios.post(captchaVerifyUrl, null, {
            params: {
                secret: CAPTCHA_SECRET,
                response: captchaResponse
            }
        });

        console.log('Captcha response data:', captchaResponseData.data);

        // Check if CAPTCHA verification succeeded
        if (!captchaResponseData.data.success) {
            return res.status(400).json({ message: 'Captcha verification failed.' });
        }

        // 2. Send message to Telegram
        const message = `
ðŸ“¢ New Service Request:
ðŸ‘¤ Name: ${name}
ðŸ’¬ Discord ID: ${discordId}
ðŸŽ® ESO In-Game ID: ${esoId}
ðŸ“‹ Service Request: ${serviceRequest}
        `;

        const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        const telegramResponse = await axios.post(telegramUrl, {
            chat_id: TELEGRAM_CHAT_ID,
            text: message,
        });

        if (telegramResponse.status !== 200) {
            return res.status(500).json({ message: 'Failed to send message to Telegram.' });
        }

        // Respond with success message
        res.json({ message: 'Service request sent successfully!' });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Server error. Please try again later.' });
    }
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}`);
});
